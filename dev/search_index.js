var documenterSearchIndex = {"docs":
[{"location":"functions/#Module","page":"Functions","title":"Module","text":"","category":"section"},{"location":"functions/","page":"Functions","title":"Functions","text":"Modules = [MAGEMinEnsemble]","category":"page"},{"location":"functions/#MAGEMinEnsemble.MAGEMinEnsemble","page":"Functions","title":"MAGEMinEnsemble.MAGEMinEnsemble","text":"Main module for MAGEMinEnsemble.jl.\n\n\n\n\n\n","category":"module"},{"location":"functions/#Crystallisation-Submodule","page":"Functions","title":"Crystallisation Submodule","text":"","category":"section"},{"location":"functions/","page":"Functions","title":"Functions","text":"Modules = [MAGEMinEnsemble.Crystallisation]","category":"page"},{"location":"functions/#MAGEMinEnsemble.Crystallisation.bulk_crystallisation-Tuple{Vector{Float64}, Float64, Vector{Float64}, Any, Vector{String}, String, Union{Nothing, Float64}}","page":"Functions","title":"MAGEMinEnsemble.Crystallisation.bulk_crystallisation","text":"Out = bulk_crystallisation(T_array, P, bulk_init, database, oxides, max_steps, sys_in)\n\nPerform a bulk crystallisation simulation using MAGEMin at constant intensive variables e.g., pressure, oxygen fugacity.\n\nInputs\n\nT_array (Vector{Float64}): Temperatures in degrees Celsius.\nP (Float64): Pressure in kbar.\nbulk_init (Vector{Float64}): Initial bulk composition.\ndatabase: MAGEMin database for simulations. For example, \"ig\" is the igneous database of Holland et al., 2018.\noxides (Vector{String}): Oxides that correspond to values in the bulk composition. See MAGEMin documentation for accepted oxides.\nsys_in (String): Unit for initial bulk composition, can be \"wt\" or \"mol\", for wt(defaults to \"wt\")\n\nOutputs\n\nOut (Vector{MAGEMinC.gminstruct{Float64, Int64}}): array of simulation outputs for each temperature step.\n\n\n\n\n\n","category":"method"},{"location":"functions/#MAGEMinEnsemble.Crystallisation.fractional_crystallisation-Tuple{Vector{Float64}, Float64, Vector{Float64}, Any, Vector{String}, String, Union{Nothing, Float64}}","page":"Functions","title":"MAGEMinEnsemble.Crystallisation.fractional_crystallisation","text":"Out = fractional_crystallisation(T_array, P, bulk_init, database, oxides, max_steps, sys_in)\n\nPerform a fractional crystallisation simulation using MAGEMin at constant intensive variables e.g., pressure, oxygen fugacity.\n\nInputs\n\nT_array (Vector{Float64}): Temperatures in degrees Celsius.\nP (Float64): Pressure in kbar.\nbulk_init (Vector{Float64}): Initial bulk composition.\ndatabase: MAGEMin database for simulations.\noxides (Vector{String}): Oxides that correspond to values in the bulk composition. See MAGEMin documentation for accepted oxides.\nsys_in (String): Unit for initial bulk composition, can be \"wt\" or \"mol\", for wt(defaults to \"wt\")\n\nOutputs\n\nOut (Vector{MAGEMinC.gminstruct{Float64, Int64}}): array of simulation outputs for each temperature step.\n\n\n\n\n\n","category":"method"},{"location":"functions/#InputValidation-Submodule","page":"Functions","title":"InputValidation Submodule","text":"","category":"section"},{"location":"functions/","page":"Functions","title":"Functions","text":"Modules = [MAGEMinEnsemble.InputValidation]","category":"page"},{"location":"functions/#MAGEMinEnsemble.InputValidation.check_buffer_if_offset-Tuple{OrderedCollections.OrderedDict, OrderedCollections.OrderedDict}","page":"Functions","title":"MAGEMinEnsemble.InputValidation.check_buffer_if_offset","text":"check_buffer_if_offset(constant_inputs::OrderedDict, variable_inputs::OrderedDict)\n\nIf offset is provided, checks that buffer is also provided.\n\n\n\n\n\n","category":"method"},{"location":"functions/#MAGEMinEnsemble.InputValidation.check_bulk_frac-Tuple{String}","page":"Functions","title":"MAGEMinEnsemble.InputValidation.check_bulk_frac","text":"check_bulk_frac(td_database)\n\nCheck whether bulk_frac is either \"bulk\" or \"frac\".\n\n\n\n\n\n","category":"method"},{"location":"functions/#MAGEMinEnsemble.InputValidation.check_constant_inputs_values-Tuple{OrderedCollections.OrderedDict}","page":"Functions","title":"MAGEMinEnsemble.InputValidation.check_constant_inputs_values","text":"check_constant_inputs_values(constant_inputs)\n\nCheck the contents of constant_inputs for typing, ensure that numeric values are Float64.\n\n\n\n\n\n","category":"method"},{"location":"functions/#MAGEMinEnsemble.InputValidation.check_keys_oxygen-Tuple{OrderedCollections.OrderedDict}","page":"Functions","title":"MAGEMinEnsemble.InputValidation.check_keys_oxygen","text":"oxides = check_keys_oxygen(od)\n\nReturns keys in an ordered dictionary (od) that contain a capital \"O\".\n\n\n\n\n\n","category":"method"},{"location":"functions/#MAGEMinEnsemble.InputValidation.check_matching_keys-Tuple{OrderedCollections.OrderedDict, OrderedCollections.OrderedDict}","page":"Functions","title":"MAGEMinEnsemble.InputValidation.check_matching_keys","text":"check_matching_keys(constant_inputs, variable_inputs)\n\nCheck no keys are defined in both constant and variable inputs.\n\n\n\n\n\n","category":"method"},{"location":"functions/#MAGEMinEnsemble.InputValidation.check_required_inputs-Tuple{OrderedCollections.OrderedDict, OrderedCollections.OrderedDict}","page":"Functions","title":"MAGEMinEnsemble.InputValidation.check_required_inputs","text":"check_required_inputs(constant_inputs, variable_inputs)\n\nCheck that list of required inputs is defined in either constantinputs or variableinputs\n\n\n\n\n\n","category":"method"},{"location":"functions/#MAGEMinEnsemble.InputValidation.check_td_database-Tuple{String}","page":"Functions","title":"MAGEMinEnsemble.InputValidation.check_td_database","text":"check_td_database(td_database)\n\nCheck whether the provided td_database flag is accepted by MAGEMin.\n\n\n\n\n\n","category":"method"},{"location":"functions/#MAGEMinEnsemble.InputValidation.check_variable_inputs_vectors-Tuple{OrderedCollections.OrderedDict}","page":"Functions","title":"MAGEMinEnsemble.InputValidation.check_variable_inputs_vectors","text":"check_variable_inputs_vectors(variable_inputs)\n\nCheck that variable inputs are Vectors.\n\n\n\n\n\n","category":"method"},{"location":"functions/#MAGEMinEnsemble.InputValidation.prepare_inputs-Tuple{OrderedCollections.OrderedDict, OrderedCollections.OrderedDict, String, String}","page":"Functions","title":"MAGEMinEnsemble.InputValidation.prepare_inputs","text":"prepare_inputs(constant_inputs, variable_inputs)\n\nPrepare and validate both constantinputs and variableinputs prior to ensure they are suitable for MAGEMin.\n\nInputs:\n\nconstant_inputs (Dict): inputs that will remain unchanged between MAGEMin simulations.\nvariable_inputs (Dict): inputs that vary across MAGEMin simulations.\n\nOutputs:\n\nupdated_constant_inputs (Dict): inputs that will remain unchanged between MAGEMin simulations.\nupdated_variable_inputs (Dict): inputs that vary across MAGEMin simulations.\n\n\n\n\n\n","category":"method"},{"location":"functions/#MAGEMinEnsemble.InputValidation.replace_zero_oxides-Tuple{OrderedCollections.OrderedDict, OrderedCollections.OrderedDict}","page":"Functions","title":"MAGEMinEnsemble.InputValidation.replace_zero_oxides","text":"new_constant_inputs, new_variable_inputs = replace_zero_oxides!(constant_inputs, variable_inputs)\n\nReplaces oxides, except H2O, defined as 0.0 with 0.001.\n\n\n\n\n\n","category":"method"},{"location":"functions/#MAGEMinEnsemble.InputValidation.replace_zero_pressure-Tuple{OrderedCollections.OrderedDict, OrderedCollections.OrderedDict}","page":"Functions","title":"MAGEMinEnsemble.InputValidation.replace_zero_pressure","text":"new_constant_inputs, new_variable_inputs = replace_zero_pressure!(constant_inputs, variable_inputs)\n\nReplaces pressures defined as 0.0 with 0.001\n\n\n\n\n\n","category":"method"},{"location":"functions/#MAGEMinEnsemble.InputValidation.validate_buffer-Tuple{OrderedCollections.OrderedDict, OrderedCollections.OrderedDict}","page":"Functions","title":"MAGEMinEnsemble.InputValidation.validate_buffer","text":"validate_buffer(constant_inputs, variable_inputs)\n\nEnsure that provided buffer string(s) is permitted by MAGEMin.\n\n\n\n\n\n","category":"method"},{"location":"functions/#MAGEMinEnsemble.InputValidation.validate_oxides-Tuple{OrderedCollections.OrderedDict, OrderedCollections.OrderedDict}","page":"Functions","title":"MAGEMinEnsemble.InputValidation.validate_oxides","text":"validate_oxides(constant_inputs, variable_inputs)\n\nEnsure that the defined bulk composition has the correct oxides included. Provides error messages that identify missing or extraneous oxides.\n\n\n\n\n\n","category":"method"},{"location":"functions/#MAGEMinEnsemble.InputValidation.validate_positive_oxides-Tuple{OrderedCollections.OrderedDict, OrderedCollections.OrderedDict}","page":"Functions","title":"MAGEMinEnsemble.InputValidation.validate_positive_oxides","text":"validate_positive_oxides(constant_inputs, variable_inputs)\n\nEnsures that defined oxide values are positive. Throws an error if they are negative.\n\n\n\n\n\n","category":"method"},{"location":"functions/#MAGEMinEnsemble.InputValidation.validate_positive_pressure-Tuple{OrderedCollections.OrderedDict, OrderedCollections.OrderedDict}","page":"Functions","title":"MAGEMinEnsemble.InputValidation.validate_positive_pressure","text":"validate_positive_pressure(constant_inputs, variable_inputs)\n\nEnsures that defined pressure value(s) are positive. Throws an error if they are negative.\n\n\n\n\n\n","category":"method"},{"location":"functions/#GenerateEnsemble-Submodule","page":"Functions","title":"GenerateEnsemble Submodule","text":"","category":"section"},{"location":"functions/","page":"Functions","title":"Functions","text":"Modules = [MAGEMinEnsemble.GenerateEnsemble]","category":"page"},{"location":"functions/#MAGEMinEnsemble.GenerateEnsemble.create_T_array-Tuple{OrderedCollections.OrderedDict}","page":"Functions","title":"MAGEMinEnsemble.GenerateEnsemble.create_T_array","text":"T_array = create_T_array(all_inputs)\n\nConstruct an array of temperatures from an initial temperature (Tstart), final temperature (Tstop) and temperature increment (Tstep). Ensure that the Tstep is the correct sign.\n\n\n\n\n\n","category":"method"},{"location":"functions/#MAGEMinEnsemble.GenerateEnsemble.generate_output_filename-Tuple{OrderedCollections.OrderedDict, Tuple}","page":"Functions","title":"MAGEMinEnsemble.GenerateEnsemble.generate_output_filename","text":"output_file = generate_output_filename(variable_inputs)\n\nHelper function to generate the output filename. Has different behaviour dependant on the number of oxides in variable_inputs.\n\n\n\n\n\n","category":"method"},{"location":"functions/#MAGEMinEnsemble.GenerateEnsemble.get_bulk_oxides-Tuple{OrderedCollections.OrderedDict}","page":"Functions","title":"MAGEMinEnsemble.GenerateEnsemble.get_bulk_oxides","text":"bulk_init, Xoxides = get_bulk_oxides(all_inputs)\n\nExtract a bulk composition and matching oxide strings from all_inputs.\n\n\n\n\n\n","category":"method"},{"location":"functions/#MAGEMinEnsemble.GenerateEnsemble.run_simulations","page":"Functions","title":"MAGEMinEnsemble.GenerateEnsemble.run_simulations","text":"Output = run_simulations(constant_inputs, variable_inputs, bulk_frac)\n\nGenerates and runs simulation ensembles from intensive variable grid. Extracts inputs from constant and variable_inputs, performs simulations, and saves the outputs to appropriately named .csv and metadata files.\n\nInputs\n\nconstant_inputs (OrderedDict): Intensive variables, excluding T, that remain constant across simulation ensemble.\nvariable_inputs (OrderedDict): Intensive variables, excluding T, that vary across the simulation ensemble.\nbulk_frac (String): Flag to indicate whether bulk or fractional crystallisation simulations should be run. \"bulk\" indicates bulk crystallisation, \"frac\" indicates fractional crystallisation.\n\nKeyword Arguments\n\nsys_in (String): Indicate units for input bulk composition (defaults to \"wt\", wt.%). \"mol\" for mol.%.\noutput_dir (String): Path to save output directory to (defaults to current directory).\ntd_database (String): Flag indicating thermodynamic database to use (defaults to \"ig\": Green et al., 2025). See the MAGEMin github for options.\n\nOutputs\n\nresults (Dict{String, Any}): simulation results, where keys are variable_input combinations.\n\n\n\n\n\n","category":"function"},{"location":"functions/#MAGEMinEnsemble.GenerateEnsemble.setup_output_directory-Tuple{Union{Nothing, String}}","page":"Functions","title":"MAGEMinEnsemble.GenerateEnsemble.setup_output_directory","text":"output_dir = setup_output_directory(output_dir)\n\nFunction to check whether specified output directory exists. If not, creates directory. If it does, checks for .csv files. If directory contains .csv files throws and error and tells the user to choose another new/empty directory.\n\n\n\n\n\n","category":"method"},{"location":"functions/#MonteCarloBulk-Submodule","page":"Functions","title":"MonteCarloBulk Submodule","text":"","category":"section"},{"location":"functions/","page":"Functions","title":"Functions","text":"Modules = [MAGEMinEnsemble.MonteCarloBulk]","category":"page"},{"location":"functions/#MAGEMinEnsemble.MonteCarloBulk.check_required_inputs_mc-Tuple{OrderedCollections.OrderedDict, OrderedCollections.OrderedDict}","page":"Functions","title":"MAGEMinEnsemble.MonteCarloBulk.check_required_inputs_mc","text":"check_required_inputs_mc(constant_inputs, variable_inputs) -> nothing\n\nCheck that list of required inputs is defined in either constantinputs or variableinputs\n\n\n\n\n\n","category":"method"},{"location":"functions/#MAGEMinEnsemble.MonteCarloBulk.check_variable_inputs_vectors_mc-Tuple{OrderedCollections.OrderedDict}","page":"Functions","title":"MAGEMinEnsemble.MonteCarloBulk.check_variable_inputs_vectors_mc","text":"check_variable_inputs_vectors_mc(variable_inputs) -> nothing\n\nCheck that variable inputs are Vectors.\n\n\n\n\n\n","category":"method"},{"location":"functions/#MAGEMinEnsemble.MonteCarloBulk.extract_bulk_mc-Tuple{OrderedCollections.OrderedDict, OrderedCollections.OrderedDict}","page":"Functions","title":"MAGEMinEnsemble.MonteCarloBulk.extract_bulk_mc","text":"new_constant_inputs, new_variable_inputs = extract_bulk_mc(constant_inputs, variable_inputs)\n\nExtract \"oxides\" and \"bulk\" compositions from variable_inputs[\"bulk_mc\"]. Place \"oxides\" in new_constant_inputs and \"bulk\" in new_variable_inputs.\n\nInputs:\n\nconstant_inputs (OrderedDict): constant_inputs ordered dictionary.\nvariable_inputs (OrderedDict): variableinputs containing `\"bulkmc\"` ordered dictionary.\n\nReturns:\n\nnew_constant_inputs (OrderedDict): constant_inputs with \"oxides\" key\nnew_variable_inputs (OrderedDict): variableinputs with \"bulk\" key. No longer contains `\"bulkmc\"` key.\n\n\n\n\n\n","category":"method"},{"location":"functions/#MAGEMinEnsemble.MonteCarloBulk.generate_bulk_mc-Tuple{OrderedCollections.OrderedDict, OrderedCollections.OrderedDict, Int64}","page":"Functions","title":"MAGEMinEnsemble.MonteCarloBulk.generate_bulk_mc","text":"bulk_mc = generate_bulk_mc(bulk, abs_unc, n_samples; replace_negatives=true)\n\nRandomly sample normal distributions for each oxide defined by a bulk composition and its absolute uncertainty, n_samples times.\n\nInputs\n\nbulk (OrderedDict): Bulk composition with keys as oxide strings, e.g. SiO2.\nabs_unc (OrderedDict): Absolute uncertainties with keys that correspond to those in bulk.\nn_samples (Int): number of times to sample normal distributions.\nreplace_negatives (Bool): Flag to control whether negative values should be replaced with zero. Defaults to true.\n\nOutputs\n\nbulk_mc (OrderedDict): Ordered dictionary with keys:\n\"oxides\": Vector of oxide names (keys from bulk input)\n\"bulk\": Vector of vectors, where each inner vector is a sampled bulk composition.\n\n\n\n\n\n","category":"method"},{"location":"functions/#MAGEMinEnsemble.MonteCarloBulk.generate_output_filename_mc-Tuple{OrderedCollections.OrderedDict, Tuple}","page":"Functions","title":"MAGEMinEnsemble.MonteCarloBulk.generate_output_filename_mc","text":"output_file = generate_output_filename_mc(variable_inputs)\n\nHelper function to generate the output filename. Has different behaviour dependant on the number of oxides in variable_inputs.\n\n\n\n\n\n","category":"method"},{"location":"functions/#MAGEMinEnsemble.MonteCarloBulk.get_bulk_oxides_mc-Tuple{OrderedCollections.OrderedDict}","page":"Functions","title":"MAGEMinEnsemble.MonteCarloBulk.get_bulk_oxides_mc","text":"bulk_init, Xoxides = get_bulk_oxides_mc(all_inputs)\n\nExtract a bulk composition and matching oxide strings from all_inputs.\n\n\n\n\n\n","category":"method"},{"location":"functions/#MAGEMinEnsemble.MonteCarloBulk.prepare_inputs_mc-Tuple{OrderedCollections.OrderedDict, OrderedCollections.OrderedDict, String, String}","page":"Functions","title":"MAGEMinEnsemble.MonteCarloBulk.prepare_inputs_mc","text":"prepare_inputs_mc(constant_inputs, variable_inputs)\n\nPrepare and validate both constantinputs and variableinputs prior to ensure they are suitable for MAGEMin.\n\nInputs:\n\nconstant_inputs (OrderedDict): inputs that will remain unchanged between MAGEMin simulations.\nvariable_inputs (OrderedDict): inputs that vary across MAGEMin simulations.\n\nOutputs:\n\nupdated_constant_inputs (OrderedDict): inputs that will remain unchanged between MAGEMin simulations.\nupdated_variable_inputs (OrderedDict): inputs that vary across MAGEMin simulations.\n\n\n\n\n\n","category":"method"},{"location":"functions/#MAGEMinEnsemble.MonteCarloBulk.replace_zero_oxides_mc-Tuple{OrderedCollections.OrderedDict}","page":"Functions","title":"MAGEMinEnsemble.MonteCarloBulk.replace_zero_oxides_mc","text":"new_variable_inputs = replace_zero_oxides_mc(variable_inputs)\n\nReplaces oxides, except H2O, defined as 0.0 with 0.001.\n\n\n\n\n\n","category":"method"},{"location":"functions/#MAGEMinEnsemble.MonteCarloBulk.run_simulations_mc","page":"Functions","title":"MAGEMinEnsemble.MonteCarloBulk.run_simulations_mc","text":"Output = run_simulations_mc(constant_inputs, variable_inputs, bulk_frac)\n\nGenerates and runs simulation ensembles from intensive variable grid. Extracts inputs from constant and variable_inputs, performs simulations, and saves the outputs to appropriately named .csv and metadata files.\n\nInputs\n\nconstant_inputs (OrderedDict): Intensive variables, excluding T, that remain constant across simulation ensemble.\nvariable_inputs (OrderedDict): Intensive variables, excluding T, that vary across the simulation ensemble.\nbulk_frac (String): Flag to indicate whether bulk or fractional crystallisation simulations should be run. \"bulk\" indicates bulk crystallisation, \"frac\" indicates fractional crystallisation.\n\nKeyword Arguments\n\nsys_in (String): Indicate units for input bulk composition (defaults to \"wt\", wt.%). \"mol\" for mol.%.\noutput_dir (String): Path to save output directory to (defaults to current directory).\ntd_database (String): Flag indicating thermodynamic database to use (defaults to \"ig\": Green et al., 2025). See the MAGEMin github for options.\n\nOutputs\n\nresults (OrderedDict): simulation results, where keys are variable_input combinations.\n\n\n\n\n\n","category":"function"},{"location":"functions/#MAGEMinEnsemble.MonteCarloBulk.validate_bulk_mc_keys-Tuple{OrderedCollections.OrderedDict}","page":"Functions","title":"MAGEMinEnsemble.MonteCarloBulk.validate_bulk_mc_keys","text":"validate_bulk_mc_keys(bulk_mc) -> nothing\n\nEnsures that the given `bulk_mc` contains **only** the keys `\"bulk\"` and `\"oxides\"`.\n\nThrows an error if any key is missing or if there are extra keys.\n\nInputs:\n\nbulk_mc (OrderedDict): The dictionary to check.\n\nErrors:\n\nThrows an ArgumentError if the dictionary does not contain exactly the keys \"bulk\" and \"oxides\".\n\n\n\n\n\n","category":"method"},{"location":"functions/#MAGEMinEnsemble.MonteCarloBulk.validate_bulk_mc_structure-Tuple{OrderedCollections.OrderedDict}","page":"Functions","title":"MAGEMinEnsemble.MonteCarloBulk.validate_bulk_mc_structure","text":"validate_bulk_mc_structure(bulk_mc::OrderedDict) -> nothing\n\nEnsures that the given OrderedDict follows the expected structure:\n\n\"oxides\" → Vector{String}\n\"bulk\" → Vector{Vector{Float64}}\n\nInputs:\n\nbulk_mc (OrderedDict): The dictionary to check.\n\nErrors:\n\nThrows an ArgumentError if bulk_mc does not contain exactly the required keys or if the values are of the wrong type.\n\n\n\n\n\n","category":"method"},{"location":"functions/#MAGEMinEnsemble.MonteCarloBulk.validate_oxides_mc-Tuple{OrderedCollections.OrderedDict}","page":"Functions","title":"MAGEMinEnsemble.MonteCarloBulk.validate_oxides_mc","text":"validate_oxides_mc(variable_inputs)\n\nEnsure that the defined bulk composition has the correct oxides included. Provides error messages that identify missing or extraneous oxides.\n\n\n\n\n\n","category":"method"},{"location":"functions/#MAGEMinEnsemble.MonteCarloBulk.validate_positive_oxides_mc-Tuple{OrderedCollections.OrderedDict}","page":"Functions","title":"MAGEMinEnsemble.MonteCarloBulk.validate_positive_oxides_mc","text":"validate_positive_oxides_mc(variable_inputs) -> Nothing\n\nEnsures that all oxide values in \"bulk_mc\" are positive. Throws an error if negative values are found.\n\nInputs:\n\nvariable_inputs (OrderedDict): A dictionary containing \"bulk_mc\", which must include:\n\"oxides\" → Vector{String} of oxide names.\n\"bulk\" → Vector{Vector{Float64}} of compositions.\n\nErrors:\n\nThrows an ArgumentError if any value in \"bulk\" is negative.\n\n\n\n\n\n","category":"method"},{"location":"oxygen_fugacity/#Controlling-Oxygen-Fugacity","page":"Controlling Oxygen Fugacity","title":"Controlling Oxygen Fugacity","text":"","category":"section"},{"location":"oxygen_fugacity/#Introduction","page":"Controlling Oxygen Fugacity","title":"Introduction","text":"","category":"section"},{"location":"oxygen_fugacity/#What-is-an-Oxygen-Fugacity-Buffer?","page":"Controlling Oxygen Fugacity","title":"What is an Oxygen Fugacity Buffer?","text":"","category":"section"},{"location":"oxygen_fugacity/","page":"Controlling Oxygen Fugacity","title":"Controlling Oxygen Fugacity","text":"Each oxygen fugacity buffer, given specified temperature and pressure conditions, constrains the chemical potential of O₂ (mu_mathrmO_2). This chemical potential is converted to fugacity (fmathrmO_2), essentially expressing it as 'pseudo'-pressure, referenced to the standard state of 1 bar. It is calculated using the equation (Frost, 1991):","category":"page"},{"location":"oxygen_fugacity/","page":"Controlling Oxygen Fugacity","title":"Controlling Oxygen Fugacity","text":"log_10 fmathrmO_2 = fracmu_mathrmO_2^circ + int Delta V  dPR times T times ln 10","category":"page"},{"location":"oxygen_fugacity/","page":"Controlling Oxygen Fugacity","title":"Controlling Oxygen Fugacity","text":"where V is volume in m³, P is pressure in bar, R is the molar gas constant, and T is the temperature in Kelvin.","category":"page"},{"location":"oxygen_fugacity/","page":"Controlling Oxygen Fugacity","title":"Controlling Oxygen Fugacity","text":"note: Note\nAn oxygen fugacity buffer is a convenient way to express the chemical potential of O₂ in a system. However, in nature, the oxygen fugacity is a consequence of the phase assemblage and intensive parameters, rather than a control. See Frost (1991), Anenburg and O’Neill (2019), Weller et al. (2024) for more details.","category":"page"},{"location":"oxygen_fugacity/#Controlling-Oxygen-Fugacity-in-MAGEMin","page":"Controlling Oxygen Fugacity","title":"Controlling Oxygen Fugacity in MAGEMin","text":"","category":"section"},{"location":"oxygen_fugacity/","page":"Controlling Oxygen Fugacity","title":"Controlling Oxygen Fugacity","text":"MAGEMin allows the oxygen fugacity of a simulation to be controlled in several ways:","category":"page"},{"location":"oxygen_fugacity/","page":"Controlling Oxygen Fugacity","title":"Controlling Oxygen Fugacity","text":"<ol>\n    <li>Specify an oxygen fugacity buffer and/or offset, then prescribe the amount of free oxygen by:\n        <ol type=\"a\">\n            <li>Assigning the concentration of oxygen (O), or</li>\n            <li>Assigning the concentration of Fe₂O₃</li>\n        </ol>\n    </li>\n    <li>Assign the concentration of oxygen (O) without specifying a buffer and/or offset</li>\n    <li>Assign the concentration of Fe₂O₃, without specifying a buffer and/or offset</li>\n</ol>","category":"page"},{"location":"oxygen_fugacity/","page":"Controlling Oxygen Fugacity","title":"Controlling Oxygen Fugacity","text":"MAGEMin does not allow both Fe₂O₃ and O to be assigned simultaneously.","category":"page"},{"location":"oxygen_fugacity/","page":"Controlling Oxygen Fugacity","title":"Controlling Oxygen Fugacity","text":"In the first case, the amount of free oxygen must be sufficient to satisfy the specified oxygen fugacity buffer and offset. Any excess oxygen or ferrous iron will be ignored. However, this raises the question, how much O or Fe₂O₃ is sufficient? For Fe₂O₃, this is complicated by the fact that Fe₂O₃ inherently contains both Fe and O, meaning its addition affects the bulk composition beyond just contributing free oxygen.","category":"page"},{"location":"oxygen_fugacity/","page":"Controlling Oxygen Fugacity","title":"Controlling Oxygen Fugacity","text":"This question can be addressed by performing a series of MAGEMin simulations with varying O or Fe₂O₃. Since oxygen fugacity buffers are dependent on both temperature and pressure, the simulations should be conducted across a range of buffers, pressures and O or Fe₂O₃ concentrations.","category":"page"},{"location":"oxygen_fugacity/#Testing-Using-MAGEMinEnsemble","page":"Controlling Oxygen Fugacity","title":"Testing Using MAGEMinEnsemble","text":"","category":"section"},{"location":"oxygen_fugacity/","page":"Controlling Oxygen Fugacity","title":"Controlling Oxygen Fugacity","text":"The code below performs 90 bulk crystallisation simulations using MAGEMinEnsemble. The composition used is a well-studied peridotite-like composition, KLB-1 (Takahashi, 1986). The simulations are performed at 1 °C temperature steps between 1400 and 800 °C. To examine the effect of pressure, simulations are performed at 1 bar, 1.0 kbar, and 5.0 kbar. All oxygen fugacity buffers currently available in MAGEMin are tested. Finally the simulations are performed with variable oxygen, or Fe₂O₃, contents, at 0.0, 1.0, 5.0, 10.0 and 20.0 wt.%.","category":"page"},{"location":"oxygen_fugacity/","page":"Controlling Oxygen Fugacity","title":"Controlling Oxygen Fugacity","text":"constant_inputs = OrderedDict(\n    # Set the initial, final and incremental\n    # temperature in degrees °C\n    \"T_start\" => 1400.,\n    \"T_stop\" => 800.,\n    \"T_step\" => -1.,\n\n    # Set KLB-1 bulk composition oxides in wt.% oxide\n    \"SiO2\"  => 44.66,\n    \"TiO2\"  =>  1.42,\n    \"Al2O3\" => 15.90,\n    \"Cr2O3\" =>  0.00,\n    \"FeO\"   => 11.41,\n    \"MgO\"   =>  7.79,\n    \"CaO\"   => 11.24,\n    \"Na2O\"  =>  2.74,\n    \"K2O\"   =>  0.22,\n    \"H2O\"   =>  0.00\n)\n\nvariable_inputs = OrderedDict(\n    \"P\" => [0.0, 1.0, 5.0],\n    \"O\" => [0.0, 1.0, 5.0, 10.0, 20.0],\n    # or \"Fe2O3\" => [0.0, 1.0, 5.0, 10.0, 20.0]\n    \"buffer\" => [\"qfm\", \"qif\", \"nno\", \"hm\", \"iw\", \"cco\"]\n)\n\n# Perform the bulk crystallisation simulations using\n# the igneous thermodynamic database of Green+2025\nMAGEMinEnsemble.GenerateEnsemble.run_simulations(\n    constant_inputs,\n    variable_inputs,\n    \"bulk\", \"ig\", \"wt\"\n    )","category":"page"},{"location":"oxygen_fugacity/#Results","page":"Controlling Oxygen Fugacity","title":"Results","text":"","category":"section"},{"location":"oxygen_fugacity/#Buffered-with-Variable-Oxygen","page":"Controlling Oxygen Fugacity","title":"Buffered with Variable Oxygen","text":"","category":"section"},{"location":"oxygen_fugacity/","page":"Controlling Oxygen Fugacity","title":"Controlling Oxygen Fugacity","text":"The oxygen fugacity at each temperature step is recorded by MAGEMin and can be plotted for each oxygen concentration. Figure 1. presents the result for 0.001 (practically 0.0), 1.0, 5.0, 10.0 and 20.0 wt.% oxygen. The lines are coloured according to the assigned oxygen fugacity buffer.","category":"page"},{"location":"oxygen_fugacity/","page":"Controlling Oxygen Fugacity","title":"Controlling Oxygen Fugacity","text":"The first subfigure (A) displays the temperature-oxygen fugacity relationships for each buffer, as calculated using the Australian National University (ANU) oxygen fugacity buffer online calculator. For further details, see Anenburg and O’Neill (2019).","category":"page"},{"location":"oxygen_fugacity/","page":"Controlling Oxygen Fugacity","title":"Controlling Oxygen Fugacity","text":"(Image: MAGEMin_Results_Variable_O) Figure 1: Reference and simulated oxygen fugacities, for a given buffer, pressure and temperature. Colours reflect the defined oxygen fugacity buffer. Solid lines represent simulations performed at 1 bar, dot-dashed lines represent 1 kbar, and dashed lines represent 5 kbar. A. Reference oxygen fugacities from the online Oxygen fugacity buffer calculator. The effect of variable oxygen on the simulations is shown in: B. 0.001, C. 1.0, D. 5.0, E 10.0, and F. 20.0 wt.% O.","category":"page"},{"location":"oxygen_fugacity/","page":"Controlling Oxygen Fugacity","title":"Controlling Oxygen Fugacity","text":"At 0.001 wt.% oxygen, the simulation's oxygen fugacity behaves unpredictably, remaining at low oxygen fugacities (Figure 1B). At 1.0 wt.% oxygen, simulations performed at all buffers except for the highest available oxygen fugacity buffer (Hematite-Magnetite) behave as expected, with the latter exhibiting unstable behaviour below approximately 1100 °C (Figure 1C). At and above 5.0 wt.% oxygen, simulations performed at all buffers behave in a stable manned throughout the specified temperature range (Figure 1D-F).","category":"page"},{"location":"oxygen_fugacity/","page":"Controlling Oxygen Fugacity","title":"Controlling Oxygen Fugacity","text":"note: Note\nThe oxygen fugacity buffers in MAGEMin do not behave identically to those in the online calculator. For the most part, the differences are negligible, but the discrepancy is particularly evident for the Carbon-Carbon Monoxide buffer (CCO).","category":"page"},{"location":"oxygen_fugacity/","page":"Controlling Oxygen Fugacity","title":"Controlling Oxygen Fugacity","text":"Overall, the MAGEMin simulations behave as expected. When sufficient oxygen is provided to saturate the oxygen fugacity buffer, the simulations follow the defined buffer behaviour. For the KLB-1 bulk composition, 5.0 wt.% O provides sufficient free oxygen so that all simulations behave according to their specified buffer.","category":"page"},{"location":"oxygen_fugacity/#Buffered-with-Variable-FeO","page":"Controlling Oxygen Fugacity","title":"Buffered with Variable Fe₂O₃","text":"","category":"section"},{"location":"oxygen_fugacity/","page":"Controlling Oxygen Fugacity","title":"Controlling Oxygen Fugacity","text":"Similarly, simulations can be performed with variable Fe₂O₃ concentrations. The results are shown below in Figure 2.","category":"page"},{"location":"oxygen_fugacity/","page":"Controlling Oxygen Fugacity","title":"Controlling Oxygen Fugacity","text":"(Image: MAGEMin_Results_Variable_Fe₂O₃) Figure 2: Reference and simulated oxygen fugacities (fO2), for a given buffer, pressure and temperature. Colours reflect the defined oxygen fugacity buffer. Solid lines represent 1 bar, dot-dashed lines represent 1 kbar, and dashed lines represent 5 kbar. A. Reference oxygen fugacities from the online Oxygen fugacity buffer calculator. The effect of variable Fe₂O₃ on MAGEMin simulations is shown in: B. 0.001, C. 1.0, D. 5.0, E. 10.0, and F. 20.0 wt.% Fe₂O₃. Note the positive y-axis for subfigure B.","category":"page"},{"location":"oxygen_fugacity/","page":"Controlling Oxygen Fugacity","title":"Controlling Oxygen Fugacity","text":"Compared to the simulations with variable oxygen concentration, the oxygen fugacity behaviour of the MAGEMin simulations with variable Fe₂O₃ differs significantly. At 0.0 wt.% Fe₂O₃, the simulations yield unrealistically high, positive oxygen fugacities (Figure 2B). At 1.0 wt.% Fe₂O₃, only simulations set to the lower oxygen fugacity buffers (Iron-Wüstite, Quartz-Ilmenite-Fayalite, Carbon-Carbon Monoxide) show stable behaviour with decreasing temperature (Figure 2C). Simulations set to the Hematite-Magnetite and Nickel-Nickel Oxide buffers do not behave as according to their buffer.","category":"page"},{"location":"oxygen_fugacity/","page":"Controlling Oxygen Fugacity","title":"Controlling Oxygen Fugacity","text":"Above 1100 °C the simulations behave in a stable manner. However, those set to the Magnetite-Hematite buffer have oxygen fugacities approximately 7.5 log units below their expected values and those set to the Nickle-Nickle Oxide buffer are approximately 2.5 log units below their expected values. Below 1100 °C, simulations set to these two buffers converge (Figure 2C), and do not behave as if they are buffered.","category":"page"},{"location":"oxygen_fugacity/","page":"Controlling Oxygen Fugacity","title":"Controlling Oxygen Fugacity","text":"At higher Fe₂O₃ concentrations, the behaviour of simulations for the two more oxidising buffers gets closer to their expected behaviour (Figure 2D-F). At 10.0 wt.% Fe₂O₃, simulations set to the Nickel-Nickel Oxide buffer behave according to their buffer (Figure 2E). However, even at 20.0 wt.% Fe₂O₃, simulations set to the Hematite-Magnetite buffer do not behave according to the buffer below 1100 °C (Figure 2F).","category":"page"},{"location":"oxygen_fugacity/#Implications-and-Recommendations","page":"Controlling Oxygen Fugacity","title":"Implications and Recommendations","text":"","category":"section"},{"location":"oxygen_fugacity/","page":"Controlling Oxygen Fugacity","title":"Controlling Oxygen Fugacity","text":"The results of these simulations highlight the importance of providing sufficient free oxygen or ferric iron when using oxygen fugacity buffers in MAGEMin.","category":"page"},{"location":"oxygen_fugacity/#The-Importance-of-Sufficient-Free-Oxygen","page":"Controlling Oxygen Fugacity","title":"The Importance of Sufficient Free Oxygen","text":"","category":"section"},{"location":"oxygen_fugacity/","page":"Controlling Oxygen Fugacity","title":"Controlling Oxygen Fugacity","text":"For buffered simulations to behave as expected, enough free oxygen must be provided from either O or Fe₂O₃. Without it, the two cases behave very differently. When O is set to 0.0 wt.%, the simulations have very low fO₂ regardless of buffer. In contrast, when Fe₂O₃ is set to 0.0 wt.%, the simulations have extremely high, non-geologically realistic fO₂.","category":"page"},{"location":"oxygen_fugacity/#Potential-Challenges-with-FeO","page":"Controlling Oxygen Fugacity","title":"Potential Challenges with Fe₂O₃","text":"","category":"section"},{"location":"oxygen_fugacity/","page":"Controlling Oxygen Fugacity","title":"Controlling Oxygen Fugacity","text":"Unlike O addition, using Fe₂O₃ to control oxygen fugacity introduces complexity due to its effect on the overall bulk composition. With increasing Fe₂O₃ you add both oxygen and affect the bulk composition. The bulk composition is normalised to 100 wt.% which includes Fe₂O₃ but not O, this reduces the relative concentrations of other oxides.","category":"page"},{"location":"oxygen_fugacity/#Implications-for-Modelling","page":"Controlling Oxygen Fugacity","title":"Implications for Modelling","text":"","category":"section"},{"location":"oxygen_fugacity/","page":"Controlling Oxygen Fugacity","title":"Controlling Oxygen Fugacity","text":"To buffer oxygen fugacity in your simulations, and if the bulk composition contains both ferric and ferrous iron, redistribute iron as FeO_mathrmtotal​, apply the desired buffer or offset, and ensure at least ~5.0 wt.% oxygen (the exact value depends on the bulk composition and buffer) to guarantee buffered behaviour. Using Fe₂O₃ instead of O to provide free oxygen may lead to non-buffered behaviour, particularly with more oxidising buffers.","category":"page"},{"location":"oxygen_fugacity/","page":"Controlling Oxygen Fugacity","title":"Controlling Oxygen Fugacity","text":"Regardless of how you control oxygen fugacity in your simulations, it is crucial to check that the oxygen fugacity behaves as expected. All MAGEMinEnsemble output .csv files contain a log10(fO2) column. Bulk oxygen fugacity is shown for each system row. Unstable behaviour over small temperature ranges suggests the simulation may not be functioning properly.","category":"page"},{"location":"oxygen_fugacity/#References-and-Further-Reading","page":"Controlling Oxygen Fugacity","title":"References and Further Reading","text":"","category":"section"},{"location":"oxygen_fugacity/","page":"Controlling Oxygen Fugacity","title":"Controlling Oxygen Fugacity","text":"Anenburg, M. and O’Neill, H. S. (2019). Redox in Magmas: Comment on a Recent Treatment of the Kaiserstuhl Volcanics (Braunger et al., Journal of Petrology, 59, 1731–1762, 2018) and Some Other Misconceptions. Journal of Petrology, egz046.\n\n\n\nFrost, B. R. (1991). Introduction to oxygen fugacity and its petrologic importance. In: Oxide minerals: petrologic and magnetic significance, No. 25 of Reviews in mineralogy (Mineralogical society of America, Washington (D.C.)).\n\n\n\nTakahashi, E. (1986). Melting of a dry peridotite KLB‐1 up to 14 GPa: Implications on the Origin of peridotitic upper mantle. Journal of Geophysical Research: Solid Earth 91, 9367–9382.\n\n\n\nWeller, O. M.; Holland, T. J.; Soderman, C. R.; Green, E. C.; Powell, R.; Beard, C. D. and Riel, N. (2024). New Thermodynamic Models for Anhydrous Alkaline-Silicate Magmatic Systems. Journal of Petrology 65, egae098.\n\n\n\n","category":"page"},{"location":"intensive_variables/#intensive_variables","page":"Intensive Variables","title":"Intensive Variables","text":"","category":"section"},{"location":"intensive_variables/","page":"Intensive Variables","title":"Intensive Variables","text":"MAGEMinEnsemble allows the user to define a parameter space over which an ensemble of thermodynamic simulations are performed. This section describes the intensive parameters that can be specified. Mandatory parameters are marked (mandatory). Incorrect inputs will generally result in descriptive errors when the simulations are run.","category":"page"},{"location":"intensive_variables/#Temperature-(mandatory)","page":"Intensive Variables","title":"Temperature (mandatory)","text":"","category":"section"},{"location":"intensive_variables/","page":"Intensive Variables","title":"Intensive Variables","text":"Temperature is specified using initial (\"T_start\"), final (\"T_stop\") and incremental (\"T_step\") temperatures, in degrees Celsius. Where corresponding values are floats.","category":"page"},{"location":"intensive_variables/","page":"Intensive Variables","title":"Intensive Variables","text":"constant_inputs = OrderedDict(\n    \"T_start\" => 1400.,  # Starting temperature (°C)\n    \"T_stop\" => 800.,    # Final temperature (°C)\n    \"T_step\" => -1.      # Temperature step (°C)\n)","category":"page"},{"location":"intensive_variables/","page":"Intensive Variables","title":"Intensive Variables","text":"note: Note\nFor crystallisation simulations, the final temperature may not be reached, as fractional simulations will stop when the bulk solidus (i.e., when the melt fraction is 0). To ensure that the simulations start above the solidus, choose a sufficiently high maximum temperature.","category":"page"},{"location":"intensive_variables/","page":"Intensive Variables","title":"Intensive Variables","text":"Any or all of the three temperature keys can also be assigned as variable_inputs. For example, running multiple simulations with variable \"T_step\" to investigate the effects of varying temperature increments.","category":"page"},{"location":"intensive_variables/","page":"Intensive Variables","title":"Intensive Variables","text":"variable_inputs = OrderedDict(\n    # Different step sizes\n    \"T_step\" => [-1., -2., -5., -10., -20.]\n)","category":"page"},{"location":"intensive_variables/#Bulk-composition-(mandatory)","page":"Intensive Variables","title":"Bulk composition (mandatory)","text":"","category":"section"},{"location":"intensive_variables/","page":"Intensive Variables","title":"Intensive Variables","text":"The bulk composition of the simulation is specified in terms of oxide wt.%. MAGEMin operates in an 11-dimensional composition space: Na₂O–CaO–K₂O–FeO–MgO–Al₂O₃–SiO₂–TiO₂–Fe₂O₃–Cr₂O₃–H₂O.","category":"page"},{"location":"intensive_variables/","page":"Intensive Variables","title":"Intensive Variables","text":"Each oxide is defined by a key, value pair, where the value is a float. All oxide values should be positive. When an oxide is set to 0.0  (except for \"H2O\") it is internally adjusted to 0.001 wt.% to avoid instabilities. See the MAGEMin documentation for more information.","category":"page"},{"location":"intensive_variables/","page":"Intensive Variables","title":"Intensive Variables","text":"note: Note\nMAGEMin automatically normalises the assigned composition to 100%.","category":"page"},{"location":"intensive_variables/","page":"Intensive Variables","title":"Intensive Variables","text":"For example, a constant bulk composition of KLB-1 basalt can be defined as follows.","category":"page"},{"location":"intensive_variables/","page":"Intensive Variables","title":"Intensive Variables","text":"constant_inputs = OrderedDict(\n    # Assign a constant bulk composition in oxide wt.%\n    \"SiO2\"  => 44.66,\n    \"TiO2\"  =>  1.42,\n    \"Al2O3\" => 15.90,\n    \"Cr2O3\" =>  0.00,\n    \"FeO\"   => 11.41,\n    \"Fe2O3\" =>  0.00,\n    \"MgO\"   =>  7.79,\n    \"CaO\"   => 11.24,\n    \"Na2O\"  =>  2.74,\n    \"K2O\"   =>  0.22,\n    \"H2O\"   =>  0.00\n)","category":"page"},{"location":"intensive_variables/","page":"Intensive Variables","title":"Intensive Variables","text":"note: Note\nHere \"Fe2O3\" is given a value of 0.00 i.e. reducing conditions. Oxygen fugacity is discussed in the @ref[Fugacity and Activity] section. Either \"Fe2O3\" or \"O\" must be defined in the bulk composition.","category":"page"},{"location":"intensive_variables/","page":"Intensive Variables","title":"Intensive Variables","text":"Errors will be thrown if the user defines an oxide outside of MAGEMin's compositional space. Either due to additional oxides, e.g,. \"CuO\" or if any oxides are missing.","category":"page"},{"location":"intensive_variables/","page":"Intensive Variables","title":"Intensive Variables","text":"Any number of oxides can be defined as vectors in a variable_inputs dictionary:","category":"page"},{"location":"intensive_variables/","page":"Intensive Variables","title":"Intensive Variables","text":"variable_inputs = OrderedDict(\n    # Assign a variable H2O content from 0.0 to 8.0 wt.%\n    # in increments of 1.0 wt.%\n    \"H2O\" => collect(range(start=0.0, stop=8.0, step=1.0))\n)","category":"page"},{"location":"intensive_variables/#Pressure-(mandatory)","page":"Intensive Variables","title":"Pressure (mandatory)","text":"","category":"section"},{"location":"intensive_variables/","page":"Intensive Variables","title":"Intensive Variables","text":"Pressure is defined using the \"P\" key and has units of kilobars (kbar) and must be positive. As with oxides, when a pressure is defined as 0.0 kbar MAGEMinEnsemble automatically converts it to 1 bar to avoid instability. See the MAGEMin documentation for more details.","category":"page"},{"location":"intensive_variables/","page":"Intensive Variables","title":"Intensive Variables","text":"# Assign a constant pressure of 1.0 kbar\nconstant_inputs = OrderedDict(\n    \"P\" => 1.0\n)","category":"page"},{"location":"intensive_variables/#Fugacity-and-Activity","page":"Intensive Variables","title":"Fugacity and Activity","text":"","category":"section"},{"location":"intensive_variables/","page":"Intensive Variables","title":"Intensive Variables","text":"The fugacity (or activity) for compounds during the simulation can be buffered using the \"buffer\" and \"offset\" keys. The \"buffer\" value must be a string, while \"offset\" values are floats. If \"offset\" is defined, a \"buffer\" must also be defined.","category":"page"},{"location":"intensive_variables/#Buffer","page":"Intensive Variables","title":"Buffer","text":"","category":"section"},{"location":"intensive_variables/","page":"Intensive Variables","title":"Intensive Variables","text":"There are several buffers available in MAGEMin. These can be divided into two types, (1) oxygen fugacity buffers, and (2) activity buffers.","category":"page"},{"location":"intensive_variables/#1.-Oxygen-Fugacity-Buffers","page":"Intensive Variables","title":"1. Oxygen Fugacity Buffers","text":"","category":"section"},{"location":"intensive_variables/","page":"Intensive Variables","title":"Intensive Variables","text":"The oxygen fugacity buffer constrains the free oxygen content according to a pressure-temperature relationship. The available buffers in MAGEMin are:","category":"page"},{"location":"intensive_variables/","page":"Intensive Variables","title":"Intensive Variables","text":"Quartz-Fayalite-Magnetite (\"qfm\")\nQuartz-Iron_Faylite (\"qif\")\nNickel-Nickel Oxide (\"nno\")\nHematite-Magnetite (\"hm\")\nIron-Wüstite (\"iw\")\nCarbon-Carbon Monoxide (\"cco\")","category":"page"},{"location":"intensive_variables/","page":"Intensive Variables","title":"Intensive Variables","text":"If an oxygen fugacity buffer is set, there must be sufficient \"O\" or \"Fe2O3\" defined in the bulk composition to saturate the system at that buffer. Excess \"O\" or \"Fe2O3\" will be removed. The oxygen (\"O\") content is set to be equal to \"Fe2O3\". Therefore both \"O\" and \"Fe2O3\" should not be defined in the bulk composition.","category":"page"},{"location":"intensive_variables/","page":"Intensive Variables","title":"Intensive Variables","text":"Assigning a constant oxygen fugacity buffer:","category":"page"},{"location":"intensive_variables/","page":"Intensive Variables","title":"Intensive Variables","text":"# Assign a constant oxygen fugacity at the QFM buffer\nconstant_inputs = OrderedDict(\n    \"buffer\" => \"qfm\"\n)","category":"page"},{"location":"intensive_variables/","page":"Intensive Variables","title":"Intensive Variables","text":"Running simulations with different buffers:","category":"page"},{"location":"intensive_variables/","page":"Intensive Variables","title":"Intensive Variables","text":"# Assign a variable oxygen fugacity at the QFM and NNO buffers\nvariable_inputs = OrderedDict(\n    \"buffer\" => [\"qfm\", \"nno\"]\n)","category":"page"},{"location":"intensive_variables/#2.-Activity-Buffers","page":"Intensive Variables","title":"2. Activity Buffers","text":"","category":"section"},{"location":"intensive_variables/","page":"Intensive Variables","title":"Intensive Variables","text":"In the same manner, activity for a given oxide can be fixed using the following activity buffers:","category":"page"},{"location":"intensive_variables/","page":"Intensive Variables","title":"Intensive Variables","text":"\"aH2O\" using water as reference phase\n\"aO2\" using dioxygen as reference phase\n\"aMgO\" using periclase as reference phase\n\"aFeO\" using ferropericlase as reference phase\n\"aAl2O3\" using corundum as reference phase\n\"aTiO2\" using rutile as reference phase\n\"aSiO2\" using quartz/coesite as reference phase","category":"page"},{"location":"intensive_variables/","page":"Intensive Variables","title":"Intensive Variables","text":"As with the oxygen fugacity buffers, the corresponding oxide content must be sufficient to saturate the system. Excess oxide-content will be removed at each simulation step.","category":"page"},{"location":"intensive_variables/#Buffer-Offset","page":"Intensive Variables","title":"Buffer Offset","text":"","category":"section"},{"location":"intensive_variables/","page":"Intensive Variables","title":"Intensive Variables","text":"To perform the simulation at an activity or oxygen fugacity offset from the buffer the key \"offset\" can be used, where the offset is given in log10 units. A constant buffer and offset of QFM+1 can be set using:","category":"page"},{"location":"intensive_variables/","page":"Intensive Variables","title":"Intensive Variables","text":"constant_inputs = OrderedDict(\n    \"buffer\" => \"qfm\",\n    \"offset\" => 1.0,\n)","category":"page"},{"location":"intensive_variables/","page":"Intensive Variables","title":"Intensive Variables","text":"A variable offset can be defined by including the \"offset\" key in the variable_inputs dictionary:","category":"page"},{"location":"intensive_variables/","page":"Intensive Variables","title":"Intensive Variables","text":"constant_inputs = OrderedDict(\n    # \"buffer\" must be defined if \"offset\" is defined\n    \"buffer\" => \"qfm\"\n)\n\nvariable_inputs = OrderedDict(\n    # perform simulations at QFM-2.0 to QFM+2.0 in increments of 1.0 log10 units\n    \"offset\" => [-2.0, -1.0, 0.0, 1.0, 2.0]\n)","category":"page"},{"location":"monte_carlo/#Monte-Carlo-Bulk-Composition","page":"Monte Carlo Bulk Composition","title":"Monte Carlo Bulk Composition","text":"","category":"section"},{"location":"monte_carlo/#Introduction","page":"Monte Carlo Bulk Composition","title":"Introduction","text":"","category":"section"},{"location":"monte_carlo/","page":"Monte Carlo Bulk Composition","title":"Monte Carlo Bulk Composition","text":"Monte Carlo simulations are a method used to model the effects of uncertainty by running many simulations with random variations in input parameters. Each simulation is based on a random set of values drawn from a defined range or distribution of possible inputs, representing the uncertainty or variability in those parameters.","category":"page"},{"location":"monte_carlo/","page":"Monte Carlo Bulk Composition","title":"Monte Carlo Bulk Composition","text":"In the context of varying a bulk composition within its analytical uncertainty, Monte Carlo simulations allow you to:","category":"page"},{"location":"monte_carlo/","page":"Monte Carlo Bulk Composition","title":"Monte Carlo Bulk Composition","text":"Randomly adjust the bulk composition within the range of its analytical uncertainty.\nRun multiple simulations to see how these variations affect the results or outcomes.\nAnalyse the spread of results to understand the potential impact of the analytical uncertainty on your final conclusions.","category":"page"},{"location":"monte_carlo/#Implementing-with-MAGEMin-Ensemble","page":"Monte Carlo Bulk Composition","title":"Implementing with MAGEMin Ensemble","text":"","category":"section"},{"location":"monte_carlo/","page":"Monte Carlo Bulk Composition","title":"Monte Carlo Bulk Composition","text":"MAGEMinEnsemble has a function specially designed for this. The function generate_bulk_mc accepts two dictionaries, one defining a bulk composition as above (\"bulk\"), and a second containing corresponding absolute uncertainties (\"abs_unc\"). It produces a vector n_samples long for each oxide where each value is randomly sampled from a normal distribution defined by the measured value and its analytical uncertainty.","category":"page"},{"location":"monte_carlo/","page":"Monte Carlo Bulk Composition","title":"Monte Carlo Bulk Composition","text":"bulk = OrderedDict(\n    \"SiO2\"  => 44.66,\n    \"TiO2\"  =>  1.42,\n    \"Al2O3\" => 15.90,\n    \"Cr2O3\" =>  0.00,\n    \"FeO\"   => 11.41,\n    \"MgO\"   =>  7.79,\n    \"CaO\"   => 11.24,\n    \"Na2O\"  =>  2.74,\n    \"K2O\"   =>  0.22,\n    \"O\"     =>  4.00,\n    \"H2O\"   =>  0.00\n)\n\nabs_unc = OrderedDict(\n    \"SiO2\"  => 2.333,\n    \"TiO2\"  => 0.142,\n    \"Al2O3\" => 0.795,\n    \"Cr2O3\" => 0.0,\n    \"FeO\"   => 0.571,\n    \"MgO\"   => 0.390,\n    \"CaO\"   => 0.562,\n    \"Na2O\"  => 0.137,\n    \"K2O\"   => 0.022,\n    \"O\"     => 0.0,\n    \"H2O\"   => 0.0\n)\n\nn_samples = 5\n\nbulk_mc = MonteCarloBulk.generate_bulk_mc(bulk, abs_unc, n_samples)","category":"page"},{"location":"monte_carlo/","page":"Monte Carlo Bulk Composition","title":"Monte Carlo Bulk Composition","text":"Each oxide in bulk_mc is then a vector containing 5 floats. Those values with an uncertainty of 0.0 are simply copied n_samples times. The function automatically replaces any negative values produced by the sampling by 0.0. The resulting dictionary can be input as a variable_input to assess how the analytical uncertainty impacts the fractional crystallisation simulations.","category":"page"},{"location":"monte_carlo/","page":"Monte Carlo Bulk Composition","title":"Monte Carlo Bulk Composition","text":"The function run_simulations_mc() accounts for the randomly sampled bulk composition inside the \"bulk_mc\" ordered dictionary, and saves the outputs to .csv files as normal. They are named bulk=X.csv where X is the index of each provided bulk composition. For example, if 50 sampled bulk compositions are input, the file names will be bulk=01.csv, bulk=02.csv, ..., bulk=50.csv.","category":"page"},{"location":"monte_carlo/","page":"Monte Carlo Bulk Composition","title":"Monte Carlo Bulk Composition","text":"constant_inputs = OrderedDict(\n    # Set the initial, final and incremental\n    # temperature in degrees celsius\n    \"T_start\" => 1400.,\n    \"T_stop\" => 800.,\n    \"T_step\" => -1.,\n\n    # Set the pressure to 1 kbar\n    \"P\" => 1.0,\n\n    # Set the oxygen fugacity buffer to QFM\n    \"buffer\" => \"qfm\"\n)\n\nvariable_inputs = OrderedDict(\n    # Input the randomly sampled bulk composition\n    \"bulk_mc\" => bulk_mc\n)\n\n# Use the run_simulations_mc function to model the randomly\n# sampled bulk compositions\nOutput = MAGEMinEnsemble.MonteCarloBulk.run_simulations_mc(\n    constant_inputs,\n    variable_inputs,\n    \"bulk\"\n    )","category":"page"},{"location":"monte_carlo/","page":"Monte Carlo Bulk Composition","title":"Monte Carlo Bulk Composition","text":"Additional variable_inputs keys may also be provided e.g., variable pressure. In which case the format output file names will be P=Y_bulk=X.csv.","category":"page"},{"location":"monte_carlo/","page":"Monte Carlo Bulk Composition","title":"Monte Carlo Bulk Composition","text":"note: Note\nBear in mind that providing many bulk compositions and other variable_inputs keys may result in a very large number of total simulations.","category":"page"},{"location":"basic_usage/#Basic-Usage","page":"Basic Usage","title":"Basic Usage","text":"","category":"section"},{"location":"basic_usage/","page":"Basic Usage","title":"Basic Usage","text":"Simply put, MAGEMinEnsemble provides an interface to define a parameter space over which many MAGEMin simulations can be performed. It does this using two ordered dictionaries: constant_inputs and variable_inputs. As their names suggest, keys in constant_inputs assign the intensive variables that do not change across the ensemble of simulations. The keys in variable_inputs assign intensive variables that change across the ensemble.","category":"page"},{"location":"basic_usage/","page":"Basic Usage","title":"Basic Usage","text":"Intensive variables are assigned using key-value pairs, where the key is always a string. constant_inputs contains values that are single floats or strings. variable_inputs contains values that are vectors of floats or strings. The same key cannot be assigned in both constant_inputs and variable_inputs: a parameter cannot be defined as both constant and variable in the same simulation.","category":"page"},{"location":"basic_usage/","page":"Basic Usage","title":"Basic Usage","text":"The below example shows how the key and values of constant_inputs and variable_inputs can be assigned. These will define an ensemble of simulations over variable pressure, water and oxygen fugacity space. For a description of the available intensive variables, see section Intensive Variables.","category":"page"},{"location":"basic_usage/","page":"Basic Usage","title":"Basic Usage","text":"using MAGEMinEnsemble\nusing OrderedCollections\n\n# Assign a constant temperature range, bulk composition and oxygen fugacity buffer\nconstant_inputs = OrderedDict(\n    # Set the initial, final and incremental\n    # temperature in degrees celsius\n    \"T_start\" => 1400.,\n    \"T_stop\" => 800.,\n    \"T_step\" => -1.,\n\n    # Set bulk composition oxides in wt.% oxide\n    \"SiO2\"  => 44.66,\n    \"TiO2\"  =>  1.42,\n    \"Al2O3\" => 15.90,\n    \"Cr2O3\" =>  0.00,\n    \"FeO\"   => 11.41,\n    \"Fe2O3\" =>  6.00,\n    \"MgO\"   =>  7.79,\n    \"CaO\"   => 11.24,\n    \"Na2O\"  =>  2.74,\n    \"K2O\"   =>  0.22,\n\n    # Set constant oxygen fugacity buffer\n    \"buffer\" => \"qfm\"\n)\n\n# Assign variable pressure, oxygen fugacity buffer offset and water content\nvariable_inputs = OrderedDict(\n    # Set variable pressure between 0.0 and 5.0 kbar in increments of 1.0\n    \"P\" => collect(range(start=0.0, stop=5.0, step=1.0)),\n\n    # Set variable oxygen fugacity buffer offset from\n    # QFM-2.0 to QFM+2.0 in increments of 1.0 log units\n    \"offset\" => [-2.0, -1.0, 0.0, 1.0, 2.0],\n\n    # Set variable water content from 0.0 to 8.0 wt%\n    #in increments of 1.0\n    \"H2O\" => collect(range(start=0.0, stop=8.0, step=1.0))\n)\n\n# Run the simulations, store result in variable Output\nOutput = MAGEMinEnsemble.GenerateEnsemble.run_simulations(\n    constant_inputs,\n    variable_inputs,\n    \"frac\"\n    )","category":"page"},{"location":"basic_usage/","page":"Basic Usage","title":"Basic Usage","text":"The constant_inputs and variable_inputs are passed to the run_simulations() function to generate and run the ensemble. The third argument (bulk_frac) can be either \"bulk\" or \"frac\" to indicate whether to perform bulk or fractional crystallisation simulations. The results will be saved as appropriately named .csv files. For this ensemble, they will have the form \"P=X_offset=Y_H2O=Z.csv\", where X, Y and Z refer to the combination of values in variable_inputs. The .csv files will be accompanied by metadata.txt files.","category":"page"},{"location":"basic_usage/","page":"Basic Usage","title":"Basic Usage","text":"(Image: Output File Examples)","category":"page"},{"location":"basic_usage/","page":"Basic Usage","title":"Basic Usage","text":"To allow for further processing in Julia, the results are also stored in the variable Output.","category":"page"},{"location":"#MAGEMinEnsemble.jl-Documentation","page":"Home","title":"MAGEMinEnsemble.jl Documentation","text":"","category":"section"},{"location":"#Introduction","page":"Home","title":"Introduction","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"MAGEMinEnsemble is a Julia-based software designed to perform an ensemble of fractional crystallisation simulations across a defined intensive variable space. It utilises the Julia wrapper of MAGEMin to perform these simulations. The software is heavily inspired by Zack Gainsforth's alphaMELTSEnsemble, which similarly performs a series of thermodynamic simulations of magmatic systems using alphaMELTS.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The key features MAGEMinEnsemble provides are:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Constant and variable intensive parameters are defined in simple dictionaries.\nAn ensemble of fractional crystallisation simulations is assembled and ran across the defined parameter space.\nAll outputs are saved into appropriately named .csv files.\nSimple Monte Carlo functionality to assess the impact of uncertainties in bulk composition.","category":"page"},{"location":"","page":"Home","title":"Home","text":"This package is a work in progress and additional functionality will be added in the future.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"MAGEMinEnsemble is currently unregistered and must be installed using Pkg and directing it to the MAGEMinEnsemble.jl source file. Download this repository. Add the following to the top of your script.","category":"page"},{"location":"","page":"Home","title":"Home","text":"using Pkg\nPkg.add(path=\"Path/To/MAGEMinEnsemble\")\n\nusing MAGEMinEnsemble","category":"page"},{"location":"#Usage","page":"Home","title":"Usage","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"see Basic Usage for an introduction to using the package;\nthe Intensive Variables explains the different intensive variables.\nSee Functions for a list of all functions and links to their source code.","category":"page"}]
}
